[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto",
    "section": "",
    "text": "高校数学、単元リスト\n\n\n\n\n\n\n\nruby\n\n\nmath\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nJul 21, 2023\n\n\n1 min\n\n\n\n\n\n\n\n\n数学2、指数関数、対数関数、三角関数\n\n\n\n\n\n\n\nruby\n\n\nmath\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nJul 21, 2023\n\n\n1 min\n\n\n\n\n\n\n\n\neth\n\n\n\n\n\n\n\nruby\n\n\ncrypto\n\n\ncode\n\n\n\n\n\n\n\n\n\n\n\nJul 17, 2023\n\n\n1 min\n\n\n\n\n\n\n\n\nBoxcars\n\n\n\n\n\n\n\nruby\n\n\nai\n\n\ncode\n\n\nllm\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2023\n\n\n1 min\n\n\n\n\n\n\n\n\nlangchainrb\n\n\n\n\n\n\n\nruby\n\n\nai\n\n\ncode\n\n\nllm\n\n\n\n\n\n\n\n\n\n\n\nJul 15, 2023\n\n\n1 min\n\n\n\n\n\n\n\n\nrb_prob\n\n\n\n\n\n\n\nruby\n\n\nprobcomp\n\n\ncode\n\n\nai\n\n\n\n\n\n\n\n\n\n\n\nJul 13, 2023\n\n\n9 min\n\n\n\n\n\n\n\n\nDaru\n\n\n\n\n\n\n\nruby\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJul 13, 2023\n\n\n2 min\n\n\n\n\n\n\n\n\nIntroduction to Modeling in Gen\n\n\n\n\n\n\n\njulia\n\n\nprobcomp\n\n\ncode\n\n\nai\n\n\n\n\n\n\n\n\n\n\n\nJul 13, 2023\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-07-13introductionGen/index.html",
    "href": "posts/2023-07-13introductionGen/index.html",
    "title": "Introduction to Modeling in Gen",
    "section": "",
    "text": "https://www.gen.dev/tutorials/intro-to-modeling/tutorial"
  },
  {
    "objectID": "posts/2023-07-13introductionGen/index.html#bayesian-linear-regressioncrypto",
    "href": "posts/2023-07-13introductionGen/index.html#bayesian-linear-regressioncrypto",
    "title": "Introduction to Modeling in Gen",
    "section": "Bayesian linear regressioncrypto,",
    "text": "Bayesian linear regressioncrypto,\n\n@gen function line_model(xs::Vector{Float64})\n    # We begin by sampling a slope and intercept for the line.\n    # Before we have seen the data, we don't know the values of\n    # these parameters, so we treat them as random choices. The\n    # distributions they are drawn from represent our prior beliefs\n    # about the parameters: in this case, that neither the slope nor the\n    # intercept will be more than a couple points away from 0.\n    slope = ({:slope} ~ normal(0, 1))\n    intercept = ({:intercept} ~ normal(0, 2))\n\n    # We define a function to compute y for a given x\n    function y(x)\n        return slope * x + intercept\n    end\n\n    # Given the slope and intercept, we can sample y coordinates\n    # for each of the x coordinates in our input vector.\n    for (i, x) in enumerate(xs)\n        # Note that we name each random choice in this loop\n        # slightly differently: the first time through,\n        # the name (:y, 1) will be used, then (:y, 2) for\n        # the second point, and so on.\n        ({(:y, i)} ~ normal(y(x), 0.1))\n    end\n\n    # Most of the time, we don't care about the return\n    # value of a model, only the random choices it makes.\n    # It can sometimems be useful to return something\n    # meaningful, however; here, we return the function `y`.\n    return y\nend;\n\n\nxs = [-5., -4., -3., -2., -1., 0., 1., 2., 3., 4., 5.];\n\n\ny = line_model(xs)\n\ny (generic function with 1 method)\n\n\n\ntrace = Gen.simulate(line_model, (xs,));\n\n\nGen.get_args(trace)\n\n([-5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0],)\n\n\n\nfunction render_trace(trace; show_data=true)\n\n    # Pull out xs from the trace\n    xs, = get_args(trace)\n\n    xmin = minimum(xs)\n    xmax = maximum(xs)\n\n    # Pull out the return value, useful for plotting\n    y = get_retval(trace)\n\n    # Draw the line\n    test_xs = collect(range(-5, stop=5, length=1000))\n    fig = plot(test_xs, map(y, test_xs), color=\"black\", alpha=0.5, label=nothing,\n                xlim=(xmin, xmax), ylim=(xmin, xmax))\n\n    if show_data\n        ys = [trace[(:y, i)] for i=1:length(xs)]\n\n        # Plot the data set\n        scatter!(xs, ys, c=\"black\", label=nothing)\n    end\n\n    return fig\nend;\n\n\nrender_trace(trace)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction grid(renderer::Function, traces)\n    Plots.plot(map(renderer, traces)...)\nend;\n\n\ntraces = [Gen.simulate(line_model, (xs,)) for _=1:12]\ngrid(render_trace, traces)"
  },
  {
    "objectID": "posts/2023-07-15langchainrb/index.html",
    "href": "posts/2023-07-15langchainrb/index.html",
    "title": "langchainrb",
    "section": "",
    "text": "https://github.com/andreibondarev/langchainrb\n\np ENV['RUBYINSPECT']\n\n\"1\"\n\n\n\"1\"\n\n\n\nrequire 'langchain'\n\nopenai = Langchain::LLM::OpenAI.new(api_key: ENV[\"OPENAI_API_KEY\"])\n\nchat = Langchain::Conversation.new(llm: openai)\nchat.set_context(\"You are a chatbot from the future\")\n\nputs \"Welcome to the chatbot from the future!\"\n\nputs chat.message('hey there!')\n\nWelcome to the chatbot from the future!\nHello! How can I assist you today?"
  },
  {
    "objectID": "posts/2023-07-23Math/index.html",
    "href": "posts/2023-07-23Math/index.html",
    "title": "数学2、指数関数、対数関数、三角関数",
    "section": "",
    "text": "require \"charty\"\nrequire \"datasets\"\nrequire \"numo/narray\"\n\nfalse\n\n\n\n{\n  charty: Charty::VERSION,\n  datasets: Datasets::VERSION,\n  numo_narray: Numo::NArray::VERSION\n}\n\n{:charty=&gt;\"0.2.12\", :datasets=&gt;\"0.1.7\", :numo_narray=&gt;\"0.9.2.1\"}\n\n\n\nCharty::Backends.use(:plotly)\n\n:plotly\n\n\n\npenguins = Datasets::Penguins.new\n\nplot = Charty.scatter_plot(data: penguins, x: :body_mass_g, y: :flipper_length_mm, color: :species)\n\n\n  \n  \n  \n  \n\n\n\n\nsin\n\ncharty = Charty::Plotter.new(:gruff)\n\n#&lt;Charty::Plotter:0x000000010c8bdb90 @backend=#&lt;Charty::Backends::Gruff:0x000000010c8bdac8 @plot=Gruff&gt;&gt;\n\n\n\ncurve = charty.curve do\n  function {|x| Math.sin(x) }\n  range x: 0..10, y: -1..1\n  xlabel 'foo'\n  ylabel 'bar'\nend\ncurve.render(\"sample_images/sin.png\")"
  },
  {
    "objectID": "posts/2023-07-15intorductionRbProb/index.html",
    "href": "posts/2023-07-15intorductionRbProb/index.html",
    "title": "rb_prob",
    "section": "",
    "text": "https://github.com/geeknees/rb_prob\nIt’s not ideal, but to quickly fix the ‘method missing’ issue, I’ve added the code below.\nhttps://github.com/geeknees/rb_prob/blob/master/lib/prob.rb#L251\n\nrequire 'rubygems'\nrequire 'bundler/setup'\n\nrequire 'prob'\ninclude Probably\n\n# Alarm example from \"Artificial Intelligence - A Modern Approach\" by Russel\n# and Norvig Page 493 cc.\n#\n# Suppose you have a new fairly reliable burglar alarm at home but occasionally\n# it responds to minor earthquakes. You also have two neighbors John and Mary,\n# who have promised to call you at work when they hear the alarm. John always\n# calls when he hears the alarm, but sometimes confuses the telephone ringing\n# with the alarm and calls then, too. Mary, on the other hand, is too much in\n# loud music and sometimes misses the alarm altogether.\n#\n# So the bayesian network will be:\n#\n#           B         E\n#            \\       /\n#            _\\|   |/_\n#                A\n#             /    \\\n#           |/_    _\\|\n#          J          M\n#\n#  with probabilities:\n#  P(B) = 0.001\n#  P(E) = 0.002\n#\n#  P(A| B=true, E=true)   = 0.95\n#  P(A| B=true, E=false)  = 0.94\n#  P(A| B=false, E=true)  = 0.29\n#  P(A| B=false, E=false) = 0.001\n#\n#  P(J| A=true)  = 0.9\n#  P(J| A=false) = 0.05\n#\n#  P(M| A=true)  = 0.7\n#  P(M| A=false) = 0.01\n#\n#  where B = burglar, E = earthquake, A = alarm, J = John calls and\n#  M = Mary calls\n#\n#  ----------------------------------------------------------------------------\n#\n#  Next we want to develop some 'equivalent' functions for querying that\n#  network and do some benchmarks.\n#\n\n# first let's encode the probabilities from the network\n# P(B)\nPBurglary = choose(0.001,  :B, :notB )\n\n# P(E)\nPEarthquake = choose(0.002,  :E, :notE)\n\n# P(A|B = b,E = e)\ndef p_alarm(b, e)\n    pAlarmTable = {\n        [:B, :E] =&gt; 0.95,\n        [:B, :notE] =&gt; 0.94,\n        [:notB, :E] =&gt; 0.29,\n        [:notB, :notE] =&gt; 0.001\n    }\n\n    choose(pAlarmTable[[b, e]],  :A, :notA)\nend\n\n# P(J|A = a)\ndef p_john(a)\n    choose( a == :A ? 0.9 : 0.05, :J, :notJ)\nend\n\n# P(M|A = a)\ndef p_mary(a)\n    choose( a == :A ? 0.7 : 0.01, :M, :notM)\nend\n\n# computes the joint probability and transform result using block (if given)\n# allowing to do some marginalization over one random variable by\n# \"leaving it out\"\n#\n# for example:\n# mk_joint_p {|b,e,a,j,m| [b,e,a]} will find P(b,e,a) = Sum(j,m) { P(b,e,a,j,m) }\n#\ndef mk_joint_p(&blk)\n    PBurglary.dep { |b|\n        PEarthquake.dep {|e|\n            p_alarm(b, e).dep {|a|\n                p_john(a).dep { |j|\n                    p_mary(a).dep {|m|\n                        mk_const(if blk then blk.call([b,e,a,j,m])\n                                else [b,e,a,j,m] end)\n                    }\n                }\n            }\n        }\n    }\nend\n\n# compute (optionally conditional) joint probability of (free) random\n# variables like mk_joint_p.\n#\n# To compute conditional probability set random variables to a known state.\n# for example\n# mk_joint_p2( {:john = :J, :mary = :M} )\n# will compute\n# P(B,E,A| J = true, M = true)\n#\n# or\n# mk_joint_p2({:john = :J, :mary = :M}) {|b,e,a,j,m| b} will find\n# P(B | J = true, M = true)\ndef mk_joint_p2( tsts = {}, &blk )\n    PBurglary.dep { |b|\n    condition(!tsts[:burglary] || tsts[:burglary] == b) {\n        PEarthquake.dep {|e|\n        condition(!tsts[:earthquake] || tsts[:earthquake] == e) {\n            p_alarm(b,e).dep {|a|\n            condition(!tsts[:alarm] || tsts[:alarm] == a) {\n                p_john(a).dep {|j|\n                condition(!tsts[:john] || tsts[:john] == j) {\n                    p_mary(a).dep {|m|\n                    condition(!tsts[:mary] || tsts[:mary] == m) {\n                        mk_const(if blk then blk.call [b,e,a,j,m] else [b,e,a,j,m] end)\n                    }}\n                }}\n            }}\n        }}\n    }}.normalize\nend\n\n# like mk_joint_p2, but using event_dep directly instead of mixing in\n# condition-statements\ndef mk_joint_p3 (tsts = {}, &blk)\n    tst_b = if_just tsts[:burglary]\n    tst_e = if_just tsts[:earthquake]\n    tst_a = if_just tsts[:alarm]\n    tst_j = if_just tsts[:john]\n    tst_m = if_just tsts[:mary]\n\n    PBurglary.event_dep(tst_b) {|b|\n        PEarthquake.event_dep(tst_e) {|e|\n            p_alarm(b,e).event_dep(tst_a) {|a|\n                p_john(a).event_dep(tst_j) {|j|\n                    p_mary(a).event_dep(tst_m) {|m|\n                        mk_const(if blk then blk.call [b,e,a,j,m] else [b,e,a,j,m] end)\n                    }\n                }\n            }\n        }\n    }.normalize\nend\n\n# precompute joint probability to do bayesian inference using filter, map and\n# query?\nPJoint = mk_joint_p\n\nputs 'P(B|M=true, J=true) :'\nputs mk_joint_p3({:mary =&gt; :M, :john =&gt; :J}) {|b,e,a,j,m| b }\n\n# puts \"\\njoint probability:\"\n# puts \"==================\"\n# puts PJoint\n\n# compute P(B | M=true, J=true, E=false, A=true) using all 3 different\n# functions mk_joint_p, mk_joint_p2 and mk_joint_p3:\nputs \"\\nP(B | M=true, J=true, E=false, A=true)\"\nputs \"=====================================\"\nputs mk_joint_p2({:mary =&gt; :M, :john =&gt; :J, :earthquake =&gt; :notE, :alarm =&gt; :A}) { |b,e,a,j,m| b }.query?(&just(:B))\nputs mk_joint_p3({:mary =&gt; :M, :john =&gt; :J, :earthquake =&gt; :notE, :alarm =&gt; :A}) { |b,e,a,j,m| b }.probability(:B)\nputs PJoint.filter {|b,e,a,j,m| e == :notE && j == :J && m == :M && a == :A }.query? {|b,e,a,j,m| b == :B }\n\n# do some benchmarking:\n\nrequire 'benchmark'\n\nBenchmark.bmbm {|x|\n    i = 1000\n    x.report('joint probability:') {\n        (1..i).each {\n            mk_joint_p.filter {|b,e,a,j,m| e == :notE && j == :J && m == :M && a == :A }.query? {|b,e,a,j,m| b == :B }\n        }\n    }\n\n    x.report('joint probability precomputed:') {\n        (1..i).each {\n            PJoint.filter {|b,e,a,j,m| e == :notE && j == :J && m == :M && a == :A}.query? {|b,e,a,j,m| b == :B}\n        }\n    }\n\n    x.report('direkt:') {\n        (1..i).each {\n            mk_joint_p {|b,e,a,j,m|\n                if e == :notE && j == :J && m == :M  && a == :A\n                    [b,a]\n                else\n                    nil\n                end\n            }.query? {|b,a| b == :B}\n        }\n    }\n\n    x.report('direkt with conditions:') {\n        (1..i).each {\n            mk_joint_p2({:mary =&gt; :M, :john =&gt; :J, :earthquake =&gt; :notE, :alarm =&gt; :A}) { |b,e,a,j,m| b }.query?(&just(:B))\n        }\n    }\n\n    x.report('direkt with event condition:') {\n        (1..i).each {\n            mk_joint_p3({:mary =&gt; :M, :john =&gt; :J, :earthquake =&gt; :notE, :alarm =&gt; :A}) { |b,e,a,j,m| b }.query?(&just(:B))\n        }\n    }\n}\n\nP(B|M=true, J=true) :\nB : 28.41718353643929 %\nnotB : 71.58281646356072 %\n\nP(B | M=true, J=true, E=false, A=true)\n=====================================\n0.4847859721505931\n0.4847859721505931\n0.484785972150593\nRehearsal ------------------------------------------------------------------\njoint probability:               0.152755   0.000523   0.153278 (  0.153251)\njoint probability precomputed:   0.004824   0.000106   0.004930 (  0.004915)\ndirekt:                          0.071230   0.000220   0.071450 (  0.071437)\ndirekt with conditions:          0.019523   0.000055   0.019578 (  0.019565)\ndirekt with event condition:     0.020049   0.000129   0.020178 (  0.020144)\n--------------------------------------------------------- total: 0.269414sec\n\n                                     user     system      total        real\njoint probability:               0.139036   0.000281   0.139317 (  0.139293)\njoint probability precomputed:   0.004490   0.000101   0.004591 (  0.004562)\ndirekt:                          0.070554   0.000181   0.070735 (  0.070704)\ndirekt with conditions:          0.019188   0.000169   0.019357 (  0.019327)\ndirekt with event condition:     0.019695   0.000082   0.019777 (  0.019746)\n\n\n[#&lt;Benchmark::Tms:0x0000000104fde170 @label=\"joint probability:\", @real=0.13929300001473166, @cstime=0.0, @cutime=0.0, @stime=0.00028100000000000347, @utime=0.13903599999999994, @total=0.13931699999999994&gt;, #&lt;Benchmark::Tms:0x00000001062dfe68 @label=\"joint probability precomputed:\", @real=0.004562000016449019, @cstime=0.0, @cutime=0.0, @stime=0.00010099999999998999, @utime=0.004489999999999994, @total=0.004590999999999984&gt;, #&lt;Benchmark::Tms:0x00000001061701e0 @label=\"direkt:\", @real=0.07070399998337962, @cstime=0.0, @cutime=0.0, @stime=0.0001810000000000006, @utime=0.070554, @total=0.070735&gt;, #&lt;Benchmark::Tms:0x0000000104fdc780 @label=\"direkt with conditions:\", @real=0.019327000016346574, @cstime=0.0, @cutime=0.0, @stime=0.0001689999999999886, @utime=0.019187999999999983, @total=0.01935699999999997&gt;, #&lt;Benchmark::Tms:0x0000000104fd6650 @label=\"direkt with event condition:\", @real=0.019746000005397946, @cstime=0.0, @cutime=0.0, @stime=8.199999999999874e-05, @utime=0.019694999999999907, @total=0.019776999999999906&gt;]"
  },
  {
    "objectID": "posts/2023-07-21Math/index.html",
    "href": "posts/2023-07-21Math/index.html",
    "title": "高校数学、単元リスト",
    "section": "",
    "text": "高校数学\n\n\n\n\ngraph TB\n  数学1--&gt;数と式\n  数学1--&gt;関数と計算\n  数学1--&gt;二次関数\n  数学1--&gt;データの分析\n\n\n\n\n\n\n\n\n\ngraph TB\n  数学2--&gt;いろいろな式\n  数学2--&gt;図形と方程式\n  数学2--&gt;指数関数ー対数関数\n  数学2--&gt;三角関数\n  数学2--&gt;微分積分\n\n\n\n\n\n\n\n\n\ngraph TB\n  数学3--&gt;極限\n  数学3--&gt;微分法\n  数学3--&gt;積分法\n\n\n\n\n\n\n\n\n\ngraph TB\n  数学A--&gt;図形の性質\n  数学A--&gt;場合の数と確率\n  数学A--&gt;数学と人間の活動\n\n\n\n\n\n\n\n\n\ngraph TB\n  数学B--&gt;数列\n  数学B--&gt;統計的な推測\n  数学B--&gt;数学と社会生活\n\n\n\n\n\n\n\n\n\ngraph TB\n  数学C--&gt;ベクトル\n  数学C--&gt;平面上の曲線と複素数平面\n  数学C--&gt;数学的な表現の工夫\n\n\n\n\n\n大学数学\n\n\n\n\ngraph TB\n  教養数学--&gt;統計学\n  教養数学--&gt;微分積分学\n  教養数学--&gt;線形代数\n\n\n\n\n\n\n\n\n\ngraph TB\n  数学基礎--&gt;論理学\n  数学基礎--&gt;集合論\n  数学基礎--&gt;位相空間論\n\n\n\n\n\n\n\n\n\ngraph TB\n  解析学--&gt;ベクトル解析\n  解析学--&gt;解析学の基礎\n  解析学--&gt;常微分方程式論\n  解析学--&gt;フーリエ変換\n  解析学--&gt;複素数解析学\n  解析学--&gt;ルベーグ積分論\n  解析学--&gt;計算数理\n  解析学--&gt;偏微分方程式論\n  解析学--&gt;関数解析学\n  解析学--&gt;スペクトル論\n  解析学--&gt;確率論\n  解析学--&gt;確率微分方程式論\n\n\n\n\n\n\n\n\n\ngraph TB\n  代数学--&gt;代数学基礎ー群論ー環論\n  代数学--&gt;体論ーガロア理論\n  代数学--&gt;代数的整数論\n  代数学--&gt;ホモロジー代数学\n  代数学--&gt;数論幾何学\n  代数学--&gt;組合せ論\n\n\n\n\n\n\n\n\n\ngraph TB\n  幾何学--&gt;微分幾何学\n  幾何学--&gt;多様体論\n  幾何学--&gt;位相幾何学\n  幾何学--&gt;可微分多様体論\n  幾何学--&gt;リー群論\n  幾何学--&gt;代数多様体論\n  幾何学--&gt;代数幾何学\n  幾何学--&gt;表現論"
  },
  {
    "objectID": "posts/2023-07-16intorductionBoxcars/index.html",
    "href": "posts/2023-07-16intorductionBoxcars/index.html",
    "title": "Boxcars",
    "section": "",
    "text": "https://github.com/BoxcarsAI/boxcars\n\nrequire 'boxcars'\n\ntrue\n\n\n\n# showcase Google Serp search\ns = Boxcars::GoogleSearch.new\ns.run \"what temperature is it in Phoenix?\"\n\nFound SERP answer at [:organic_results, 0, :snippet]\nQuestion: what temperature is it in Phoenix?\nAnswer: {:snippet=&gt;\"Generally sunny. Hot. High 113F. Winds SW at 10 to 15 mph. Humidity18%.\", :url=&gt;\"https://weather.com/weather/tenday/l/Phoenix+AZ?canonicalCityId=2e5ae66bd2b43b15b0bfc4f6a3628b6e13228e32d0a57fb643144293f78ca339\"}\n\n\n{:snippet=&gt;\"Generally sunny. Hot. High 113F. Winds SW at 10 to 15 mph. Humidity18%.\", :url=&gt;\"https://weather.com/weather/tenday/l/Phoenix+AZ?canonicalCityId=2e5ae66bd2b43b15b0bfc4f6a3628b6e13228e32d0a57fb643144293f78ca339\"}\n\n\n\nrequire 'active_support'\n\nengine = Boxcars::Openai.new(max_tokens: 256)\ncalc = Boxcars::Calculator.new(engine: engine)\nputs calc.run \"what is pi to the forth power divided by 22.1?\"\n\n&gt; Entering Calculator#run\nwhat is pi to the forth power divided by 22.1?\nRubyREPL: puts (Math::PI**4) / 22.1\nAnswer: 4.407651178009159\n\n{\"status\":\"ok\",\"answer\":\"4.407651178009159\",\"explanation\":\"Answer: 4.407651178009159\",\"code\":\"puts (Math::PI**4) / 22.1\"}\n&lt; Exiting Calculator#run\n4.407651178009159\n\n\nIt is necessary to add gem ‘activesupport’ to call blank?.\nhttps://github.com/BoxcarsAI/boxcars/blob/c92c1f29aac6485903731ad8d8a2cbbb1c2a7b24/lib/boxcars/ruby_repl.rb#L22"
  },
  {
    "objectID": "posts/2023-07-14introductionDaru/index.html",
    "href": "posts/2023-07-14introductionDaru/index.html",
    "title": "Daru",
    "section": "",
    "text": "https://github.com/SciRuby/daru\nTo plot the graph, it is necessary to add gem ‘daru-view’.\nIt also requires adding gem ‘matrics’. After the PR below is merged, it will be resolved. https://github.com/SciRuby/daru/pull/541\n\nrequire 'daru'\n\n\n\n\ntrue\n\n\n\ndf = Daru::DataFrame.new({\n    a: Array.new(100) {|i| i},\n    b: 100.times.map{rand}\n  })\n  df.plot type: :scatter, x: :a, y: :b\n\n\n\n\n\n\ndf = Daru::DataFrame.new({\n    :temperature =&gt; [30.4, 23.5, 44.5, 20.3, 34, 24, 31.45, 28.34, 37, 24],\n    :sales       =&gt; [350, 150, 500, 200, 480, 250, 330, 400, 420, 560],\n    :city        =&gt; ['Pune', 'Delhi']*5,\n    :staff       =&gt; [15,20]*5\n    })\n  df\n\n Daru::DataFrame(10x4) \n\n\n\n\n\ntemperature\nsales\ncity\nstaff\n\n\n\n\n0\n30.4\n350\nPune\n15\n\n\n1\n23.5\n150\nDelhi\n20\n\n\n2\n44.5\n500\nPune\n15\n\n\n3\n20.3\n200\nDelhi\n20\n\n\n4\n34\n480\nPune\n15\n\n\n5\n24\n250\nDelhi\n20\n\n\n6\n31.45\n330\nPune\n15\n\n\n7\n28.34\n400\nDelhi\n20\n\n\n8\n37\n420\nPune\n15\n\n\n9\n24\n560\nDelhi\n20\n\n\n\n\n\n\ndf.plot(type: :scatter, x: :temperature, y: :sales) do |plot, diagram|\n    plot.x_label \"Temperature\"\n    plot.y_label \"Sales\"\n    plot.yrange [100, 600]\n    plot.xrange [15, 50]\n    diagram.tooltip_contents([:city, :staff])\n    diagram.color(Nyaplot::Colors.qual) # set the color scheme for this diagram. See Nyaplot::Colors for more info.\n    diagram.fill_by(:city) # Change color of each point WRT to the city that it belongs to.\n    diagram.shape_by(:city) # Shape each point WRT to the city that it belongs to.\n  end"
  },
  {
    "objectID": "posts/2023-07-17eth/index.html",
    "href": "posts/2023-07-17eth/index.html",
    "title": "eth",
    "section": "",
    "text": "https://github.com/q9f/eth.rb\nIt should be noted that using gem 'eth', github: 'q9f/eth.rb' can fix the error of undefined method 'bytesize' for :inspect:Symbol. The following PR addresses the issue of the overridden send method.\nhttps://github.com/q9f/eth.rb/issues/171\n\np ENV['RUBYINSPECT']\n\n\"1\"\n\n\n\"1\"\n\n\n\nrequire 'eth'\n\ntrue\n\n\n\nclient = Eth::Client.create \"https://mainnet.infura.io/v3/#{ENV['INFURA_ACCESS_TOKEN']}\"\n\n#&lt;Eth::Client::Http:0x0000000100e12138 @id=0, @max_priority_fee_per_gas=0.101e10, @max_fee_per_gas=0.4269e11, @host=\"mainnet.infura.io\", @port=443, @ssl=true, @uri=#&lt;URI::HTTPS https://mainnet.infura.io/v3/8581de3fa5864370b0b1a877ba8564b9&gt;&gt;\n\n\n\nname = \"DAI\"\nabi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]'\naddress = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\ndai = Eth::Contract.from_abi(name: name, address: address, abi: abi)\n\n#&lt;Eth::Contract::DAI:0x0000000104f0f438&gt;\n\n\n\nclient.call(dai, \"name\")\n\n\"Dai Stablecoin\"\n\n\n\nclient.call(dai, \"symbol\")\n\n\"DAI\"\n\n\n\nclient.call(dai, \"decimals\")\n\n18\n\n\n\nclient.call(dai, \"totalSupply\")\n\n4276851325257585597937104660\n\n\n\nclient.call(dai, \"balanceOf\", \"0x9a315bdf513367c0377fb36545857d12e85813ef\")\n\n0"
  }
]